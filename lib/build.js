var path = require('path');
var exec = require('child_process').exec;
var rollup = require('./deps.build').rollup;
var rollupVue = require('./deps.build').rollupVue;
var rollupJson = require('./deps.build').rollupJson;

var fileHelpers = require('./fileHelpers');

function build({ data, app, output }) {
  var outputNovella = `${output}/novella`;
  return fileHelpers.mkdir(`${outputNovella}`)
    .catch(() => {}) // Ignore mkdir errors
    .then(() => Promise.all([
      generateJS({ data, app, outputNovella }),
      generateIndex({ title: data.title, output }),
      generateIcons({ outputNovella }),
      generateThumbs({ data, output, outputNovella }),
    ]));
}

function generateJS({ data, app, outputNovella }) {
  return rollup.rollup({
    entry: app,
    plugins: [
      rollupVue({
        css: `${outputNovella}/novella.css`,
        compileTemplate: false,
      }),
      rollupJson(),
    ],
  }).then((bundle) => {
    bundle.write({
      format: 'iife',
      moduleName: 'Novella',
      indent: '  ',
      dest: `${outputNovella}/novella.js`,
      intro: `
console.log("Generated by novella at ${new Date().toLocaleString()}.");
var data = ${JSON.stringify(data)};\n`,
      globals: {vue: 'Vue'},
    });
  });
}

function generateIndex({ title, output }) {
  var templateLocation = path.resolve(__dirname, './app/index.html');
  var indexLocation = path.resolve(output, 'index.html');

  return fileHelpers.read(templateLocation)
  .then((file) => {
    var indexHTML = file.contents.replace('%TITLE%', title);
    return fileHelpers.write(indexLocation, indexHTML);
  });
}

function generateIcons({ outputNovella }) {
  var iconsDir = path.resolve(__dirname, '../icons');
  return fileHelpers.mkdir(`${outputNovella}/icons/`)
    .catch(() => {}) // Ignore mkdir errors
    .then(() => Promise.all([
        execute(`cp -r ${iconsDir}/font ${outputNovella}/icons/font`),
        execute(`cp -r ${iconsDir}/css ${outputNovella}/icons/css`),
      ])
    );
}

function generateThumbs({ data, output, outputNovella }) {
  var optimumSize = 200;

  function scaleImage(image, scale) {
    return new Promise((res, rej) => {
      image.scale(scale, (err, image) => {
        if (err) rej(err);
        res(image);
      });
    });
  }

  function makeThumb(file, outputImage) {
    return fileHelpers.readImage(file)
      .then(image => {
        var size = { width: image.width(), height: image.height() };
        var resizeOn = size.height > size.width ? 'height' : 'width';

        var scaleRatio = optimumSize / size[resizeOn];
        return scaleImage(image, scaleRatio)
          .then(image => fileHelpers.writeImage(outputImage, image));
      });
  }

  return fileHelpers.mkdir(`${outputNovella}/thumbs/`)
    .catch(() => {}) // Ignore mkdir errors
    .then(() => {
      var promises = [];
      data.pages.forEach(page => {
        if (page.type !== 'image') return;
        var outputFile = path.resolve(output, page.thumb);
        var imageFile = path.resolve(output, page.src);
        promises.push(makeThumb(imageFile, outputFile));
      });
      return Promise.all(promises);
    });
}

function execute(command, ignoreError) {
  return new Promise((res, rej) => {
    exec(command, (err, stdout) => {
      if (err && !ignoreError) rej(err);
      res(stdout);
    });
  });
}

module.exports = build;
